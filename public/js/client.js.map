{"version":3,"sources":["client/game.js","client/gameObjects/CharacterObj.js","client/gameObjects/CollectableObj.js","client/gameSprites/CharacterSpr.js","client/network/MapDataClient.js","client/network/NetworkManager.js","client/states/boot.js","client/states/login.js","client/states/play.js","client/utils/ChatManager.js","client/utils/DomHelper.js","client/utils/Pathfinder.js","client/utils/ScoreBoard.js","client/utils/camera.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjnMA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArpFA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhFA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7SA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApGA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtFA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9DA;AAAA","file":"public\\js\\client.js","sourcesContent":["\"use strict\";\n\nvar gameBootstrapper = {\n    init: function(gameContainerElementId){\n\n        var game = new Phaser.Game('100%', '100%', Phaser.AUTO, gameContainerElementId);\n\n        game.state.add('boot', require('./states/boot'));\n        game.state.add('login', require('./states/login'));\n        game.state.add('play', require('./states/play'));\n\n        game.state.start('boot');\n        \n    }\n};\n\nmodule.exports = gameBootstrapper;\n","'use strict';\n\nvar CharacterSpr = require('client/gameSprites/CharacterSpr');\nvar Pathfinder = require('client/utils/Pathfinder');\nvar NetworkManager = require('client/network/NetworkManager');\n\nvar collideWithCollectableMapAction;\n\nvar CharacterObj = function(game, x, y, isMainPlayer) {\n    this.configure(game, isMainPlayer);\n    this.setupSprite(x, y);\n    this.resetCurrentTweens();\n};\n\nCharacterObj.prototype.configure = function(game, isMainPlayer){\n    this.game = game;\n    this.isMainPlayer = isMainPlayer;\n    this.moveDuration = 500;\n    this.info = {};\n\n    this.currentTweens = [];\n    this.moving = false;\n    this.tweenInProgress = false;\n};\n\nCharacterObj.prototype.setupSprite = function(x, y){\n    this.sprite = new CharacterSpr(this.game, x, y, this.isMainPlayer);\n    this.game.add.existing(this.sprite);\n    this.game.mmo_group_characters.add(this.sprite);\n\n    this.sprite.walkDown();\n};\n\nCharacterObj.prototype.moveTo = function(targetX, targetY, pathReadyCallback){\n    var me = this;\n\n    if(this.isMainPlayer) {\n        NetworkManager.notifyMovement({x: targetX, y: targetY, uid: this.uid})\n    }\n\n    Pathfinder.calculatePath(\n        this.sprite.position.x,\n        this.sprite.position.y,\n        targetX,\n        targetY,\n        function(path) {\n            if (pathReadyCallback !== undefined || typeof pathReadyCallback === \"function\") {\n                pathReadyCallback(path);\n            }\n            me.onReadyToMove(me, path);\n        }\n    );\n};\n\n\nCharacterObj.prototype.onReadyToMove = function(me, listPoints){\n    this.resetCurrentTweens();\n    this.prepareMovement(listPoints);\n    this.moveInPath();\n};\n\nCharacterObj.prototype.resetCurrentTweens  = function(){\n    var me = this;\n    this.currentTweens.map(function(tween){\n        me.game.tweens.remove(tween);\n    });\n    this.currentTweens = [];\n    this.moving = false;\n    this.sprite.stopAnimation();\n};\n\nCharacterObj.prototype.prepareMovement = function(listPoints){\n    listPoints = listPoints || [];\n    this.currentTweens = [];\n    var me = this;\n\n    listPoints.map(function(point){\n        me.currentTweens.push(me.getTweenToCoordinate(point.x, point.y));\n    });\n\n};\n\nCharacterObj.prototype.getTweenToCoordinate = function(x, y){\n    var tween = this.game.add.tween(this.sprite.position);\n\n    x = (x * Pathfinder.tileSize) + Pathfinder.tileSize / 2;\n    y = (y * Pathfinder.tileSize) + Pathfinder.tileSize / 2;\n    tween.to({ x:x, y:y }, this.moveDuration);\n    return tween;\n};\n\nCharacterObj.prototype.moveInPath = function() {\n    if(this.currentTweens.length === 0){\n        return;\n    }\n    var index = 1, me = this;\n    this.moving = true;\n\n\n    moveToNext(this.currentTweens[index]);\n\n\n    function moveToNext(tween){\n\n        index ++;\n        var nextTween = me.currentTweens[index];\n        if(nextTween != null){\n\n            tween.onComplete.add(function(){\n                me.tweenInProgress = false;\n                moveToNext(nextTween);\n            });\n        }else{\n            // if i am the last tween\n            tween.onComplete.add(function(){\n                me.onStopMovement();\n            });\n        }\n\n        tween.start();\n        me.faceNextTile(tween);\n\n        me.tweenInProgress = true;\n    }\n};\n\nCharacterObj.prototype.faceNextTile = function(tween){\n\n    var isVerticalMovement = tween.properties.y == this.sprite.position.y;\n\n    if(isVerticalMovement) {\n        if(tween.properties.x > this.sprite.position.x){\n            this.sprite.walkRight();\n        } else {\n            this.sprite.walkLeft();\n        }\n    } else {\n        if(tween.properties.y > this.sprite.position.y){\n            this.sprite.walkDown();\n        } else {\n            this.sprite.walkUp();\n        }\n\n    }\n};\n\n/*\n Set an external function to be executed when the Player collide with a collectable\n */\nCharacterObj.prototype.setOnCollideCollectableMapAction = function(callback){\n    collideWithCollectableMapAction = callback;\n};\n\n/*\n Check if the Character sprite collide with a collectable object sprite and set the function\n to execute when a collision occurs\n */\nCharacterObj.prototype.checkCollision = function(){\n    this.sprite.callOnCollideWithCollectableSprite(this.onCollideWithCollectable);\n};\n\nCharacterObj.prototype.onCollideWithCollectable = function(collectableSpr){\n    var collectableObj = collectableSpr.collectableObj;\n\n    if(collideWithCollectableMapAction) {\n        collideWithCollectableMapAction(collectableObj);\n    }\n};\n\n\n\nCharacterObj.prototype.onStopMovement = function(){\n    this.resetCurrentTweens();\n\n};\n\nCharacterObj.prototype.setPosition = function(x, y){\n    this.sprite.position.x = x;\n    this.sprite.position.y = y;\n};\n\nCharacterObj.prototype.destroy = function(){\n  this.sprite.destroy();\n};\n\n\nCharacterObj.prototype.getInfo = function(){\n  this.info.x = this.sprite.position.x;\n  this.info.y = this.sprite.position.y;\n  this.info.uid = this.uid;\n  this.info.nickname = this.nickname;\n\n  return this.info;\n};\n\nmodule.exports = CharacterObj;","'use stric';\n\n\nvar CollectableObj = function(config) {\n    this.game = config.game;\n    this.isAvailable = config.isAvailable;\n    this.type = config.type;\n    this.uid = config.uid;\n\n    this.sprite = this.game.add.sprite(config.x, config.y, 'sprites', 'collectables/' + this.type + '.png');\n    this.sprite.collectableObj = this;\n\n    this.sprite.anchor.setTo(0, 1);\n    this.game.physics.arcade.enable(this.sprite);\n    this.game.mmo_group_collectables.add(this.sprite);\n};\n\nCollectableObj.prototype.destroy = function() {\n    this.sprite.kill();\n};\n\nmodule.exports = CollectableObj;","'use strict';\n\nvar collideWithCollectableCallback;\n\nvar CharacterSpr = function(game, x, y, isCollisionEnabled) {\n    Phaser.Sprite.call(this, game, x, y, 'sprites');\n    if(isCollisionEnabled){\n        this.enableCollision();\n    }\n    this.setupAnimations();\n};\n\nCharacterSpr.prototype = Object.create(Phaser.Sprite.prototype);\nCharacterSpr.prototype.constructor = CharacterSpr;\n\nCharacterSpr.prototype.enableCollision = function() {\n    this.game.physics.arcade.enable(this);\n    this.body.fixedRotation = true;\n};\n\nCharacterSpr.prototype.callOnCollideWithCollectableSprite = function(callback){\n    this.game.physics.arcade.overlap(this, this.game.mmo_group_collectables, function(playerSpr, collectableSpr){\n        callback(collectableSpr);\n    });\n};\n\n\nCharacterSpr.prototype.setupAnimations = function() {\n    this.anchor.setTo(0.5, 0.5);\n\n    this.animations.add('walk_down', [\n        \"character/walk/down/0.png\",\n        \"character/walk/down/1.png\",\n        \"character/walk/down/0.png\",\n        \"character/walk/down/2.png\"\n    ], 60, true);\n    this.animations.add('walk_up', [\n        \"character/walk/up/0.png\",\n        \"character/walk/up/1.png\",\n        \"character/walk/up/0.png\",\n        \"character/walk/up/2.png\"\n    ], 60, true);\n\n    this.animations.add('walk_side', [\n        \"character/walk/side/0.png\",\n        \"character/walk/side/1.png\",\n        \"character/walk/side/0.png\",\n        \"character/walk/side/2.png\"\n    ], 60, true);\n\n};\n\nCharacterSpr.prototype.walkDown = function(){\n    this.animations.play(\"walk_down\",6,true);\n};\n\nCharacterSpr.prototype.walkUp = function(){\n    this.animations.play(\"walk_up\",6,true);\n};\n\nCharacterSpr.prototype.walkLeft = function(){\n    this.scale.x = 1;\n    this.animations.play(\"walk_side\",6,true);\n};\n\nCharacterSpr.prototype.walkRight = function(){\n    this.scale.x = -1;\n    this.animations.play(\"walk_side\",6,true);\n};\n\nCharacterSpr.prototype.stopAnimation = function(){\n    this.animations.stop();\n};\n\nmodule.exports = CharacterSpr;","'use strict';\n\nvar CollectableObj = require('client/gameObjects/CollectableObj');\nvar scoreBoard = require('client/utils/ScoreBoard');\n\nvar serverSocket, concernedPhaserState;\nvar collectableObjects = [];\n\nfunction synchronize(socket, phaserState){\n    serverSocket = socket;\n    concernedPhaserState = phaserState;\n\n    // configure incoming traffic\n    serverSocket.on('SERVER_PLAYER_ID', onReadyToRequestCollectables);\n    serverSocket.on('SERVER_ALL_COLLECTABLES', onReceiveAllCollectables);\n    serverSocket.on('SERVER_COLLECTABLE_DESTROY', onDestroyCollectable);\n    serverSocket.on('SERVER_UPDATE_PLAYER_SCORES', onReceiveScores);\n\n    // initialize score board\n    scoreBoard.init();\n}\n\nfunction onReadyToRequestCollectables(){\n    serverSocket.emit('CLIENT_GET_ALL_COLLECTABLES');\n}\n\nfunction onDestroyCollectable(newCollectableInfo){\n    var collectableIdToDestroy = newCollectableInfo.uid;\n\n    var collectableToDestroy = collectableObjects.filter(function(collectable){\n        return (collectable.uid === collectableIdToDestroy);\n    })[0];\n\n\n    if(collectableToDestroy !== undefined){\n        collectableToDestroy.destroy();\n    }\n}\n\nfunction onReceiveScores(playersList){\n    scoreBoard.setScores(playersList);\n}\n\nfunction tryToCollectForPlayer(collectable, player){\n    serverSocket.emit('CLIENT_TRY_TO_COLLECT', { collectableId: collectable.uid, playerId: player.uid});\n}\n\n\n\nfunction onReceiveAllCollectables(collectableList) {\n    destroyAllCollectables();\n\n    collectableList.forEach(function(collectable){\n\n        if(collectable.isAvailable){\n            var colObj = new CollectableObj({\n                game : concernedPhaserState.game,\n                x: collectable.x,\n                y: collectable.y,\n                isAvailable: collectable.isAvailable,\n                type: collectable.type,\n                uid: collectable.uid\n            });\n        }\n        collectableObjects.push(colObj);\n    });\n}\n\nfunction destroyAllCollectables(){\n    collectableObjects.forEach(function(colObject){\n        if(colObject){\n            colObject.destroy();\n        }\n    });\n    collectableObjects = [];\n}\n\nfunction setConcernedPhaserState(state){\n    concernedPhaserState = state;\n}\n\nmodule.exports = {\n    synchronize : synchronize,\n    tryToCollectForPlayer: tryToCollectForPlayer\n};","'use strict';\n\nvar serverSocket, mainPlayer;\nvar onOtherPlayerConnectedCallback;\nvar onOtherPlayerMove;\nvar onUpdatePlayerListCallback;\nvar onReceiveChatMessageCallback;\n\nvar networkManager = {\n    connected: false,\n    connect: function (player) {\n        mainPlayer = player;\n        serverSocket = io.connect('https://mmorpg-test.herokuapp.com/');\n        // serverSocket = io.connect('http://localhost:9192');\n        serverSocket.on('connect', onConnectedToServer);\n\n        this.configureIncomingTraffic();\n\n        return serverSocket;\n    },\n    configureIncomingTraffic: function(){\n        serverSocket.on('SERVER_PLAYER_ID', onReceivePlayerId);\n\n        serverSocket.on('SERVER_PLAYER_CONNECTED', onPlayerConnected);\n        serverSocket.on('SERVER_PLAYER_LIST', onReceivePlayerList);\n        serverSocket.on('SERVER_OTHER_PLAYER_MOVED', onOtherPlayerMoved);\n        serverSocket.on('SERVER_PLAYER_CHAT_MESSAGE', onReceiveChatMessage);\n    },\n    onOtherPlayerConnected: function(callback){\n        onOtherPlayerConnectedCallback = callback;\n    },\n    onOtherPlayerMove: function(callback){\n        onOtherPlayerMove = callback;\n    },\n    notifyMovement: function(movementInfo){\n        serverSocket.emit('CLIENT_NOTIFY_PLAYER_MOVEMENT', movementInfo);\n    },\n    onUpdatePlayerList: function(callback){\n        onUpdatePlayerListCallback = callback;\n    },\n    setOnReceiveChatMessage: function(callback){\n        onReceiveChatMessageCallback = callback;\n    },\n    sendChatMessage: function(textMessage){\n        serverSocket.emit('CLIENT_CHAT_MESSAGE', {\n            uid: mainPlayer.uid,\n            nickname: mainPlayer.nickname,\n            text: textMessage\n        });\n\n    }\n};\n\nfunction onConnectedToServer() {\n    networkManager.connected = true;\n    serverSocket.emit('CLIENT_REQUEST_ID', mainPlayer.getInfo());\n    serverSocket.emit('CLIENT_REQUEST_PLAYER_LIST');\n}\n\nfunction onReceivePlayerId(mainPlayerID) {\n    mainPlayer.uid = mainPlayerID;\n}\n\nfunction onPlayerConnected(otherPlayer){\n    onOtherPlayerConnectedCallback(otherPlayer);\n}\n\nfunction onOtherPlayerMoved(movementInfo){\n    onOtherPlayerMove(movementInfo);\n}\n\nfunction onReceivePlayerList(listPlayers){\n    onUpdatePlayerListCallback(listPlayers);\n}\n\nfunction onReceiveChatMessage(messageInfo){\n    onReceiveChatMessageCallback(messageInfo);\n}\n\nmodule.exports = networkManager;\n","'use strict';\n\nfunction Boot(){}\n\nBoot.prototype = {\n    preload: function(){\n        this.game.stage.disableVisibilityChange = true;\n        this.game.stage.backgroundColor = 0x3b0760;\n        this.load.onLoadComplete.addOnce(this.onLoadComplete, this);\n        this.saveCPU = this.game.plugins.add(new Phaser.Plugin.SaveCPU)\n        console.log(this.saveCPU)\n        this.showLoadingText();\n        this.loadAssets();\n    },\n\n    onLoadComplete: function(){\n        this.game.state.start('login');\n    },\n\n    loadAssets: function(){\n        //this.game.load.tilemap('map', 'gameAssets/map/map.json', null, Phaser.Tilemap.TILED_JSON);\n        //this.game.load.image('tiles', 'gameAssets/map/tile1.png');\n        //this.game.load.image('walkables', 'gameAssets/map/walkable.png');\n\n        //this.game.load.tilemap('tilemap', 'gameAssets/map/tilemap.json', null, Phaser.Tilemap.TILED_JSON);\n        //this.game.load.image('tileset', 'gameAssets/map/tileset.png');\n\n        this.game.load.tilemap('tilemap1', 'gameAssets/map/tilemap1.json', null, Phaser.Tilemap.TILED_JSON);\n        //this.game.load.image('tileset1', 'gameAssets/map/tileset1.png');\n        this.game.load.image('tileset2', 'gameAssets/map/tileset2.png');\n        this.game.load.image('tileset3', 'gameAssets/map/tileset3.png');\n        this.game.load.image('tileset4', 'gameAssets/map/tileset4.png');\n        this.game.load.image('collision', 'gameAssets/map/walkable.png');\n        //console.log(this)\n        this.load.atlasJSONArray('sprites', 'gameAssets/sprites/sprites.png', 'gameAssets/sprites/sprites.json');\n    },\n\n    showLoadingText: function(){\n        var loadingText = \"- Loading -\";\n        var text = this.game.add.text(this.game.world.centerX, this.game.world.centerY, loadingText);\n        //  Centers the text\n        text.anchor.set(0.5);\n        text.align = 'center';\n\n        //  Our font + size\n        text.font = 'Arial';\n        text.fontWeight = 'bold';\n        text.fontSize = 70;\n        text.fill = '#ffffff';\n    }\n};\n\nmodule.exports = Boot;\n","'use strict';\n\nvar ChatManager = require('client/utils/ChatManager');\nvar DomHelper = require('client/utils/DomHelper');\n\nvar nickNameInput;\nvar domToRemove = [];\n\nfunction Login(){}\n\n\nLogin.prototype = {\n\n    create: function(){\n        this.game.stage.backgroundColor = 0x66990D;\n\n        DomHelper.init(this.game);\n        domToRemove = [];\n        this.showLoginPanel();\n    },\n    showLoginPanel: function(){\n        var me = this;\n        var panel = DomHelper.mediumPanel(180, 120, 'game-login-panel');\n        var form = DomHelper.form(saveName);\n        var blockInput = DomHelper.inputBlock();\n\n        nickNameInput = DomHelper.inputWithLabel(blockInput, 'Enter a nickname', 200, 200);\n\n        var saveButton = DomHelper.createButton('GO !!', 'game-login-button');\n\n        form.appendChild(blockInput);\n        form.appendChild(saveButton);\n        panel.appendChild(form);\n\n        domToRemove.push(panel); // removing the panel will remove all its childs\n\n        function saveName(){\n            me.game.mainPlayerName = ChatManager.setMainPlayerName(nickNameInput.value);\n            if(me.game.mainPlayerName){\n                me.cleanDom();\n                me.game.state.start('play');\n             }\n             nickNameInput.value = '';\n        }\n    },\n\n    cleanDom: function(){\n        for(var i = 0, max = domToRemove.length; i < max; i++){\n            domToRemove[i].remove();\n        }\n    }\n};\n\nmodule.exports = Login;","'use strict';\n\nvar CharacterObj = require('client/gameObjects/CharacterObj');\nvar Pathfinder = require('client/utils/Pathfinder');\nvar NetworkManager = require('client/network/NetworkManager');\nvar ChatManager = require('client/utils/ChatManager');\nvar MapDataClient = require('client/network/MapDataClient');\n\nvar red_zone\nvar cursors;\nfunction Play(){}\n\nPlay.prototype = {\n    create: function(){\n        this.game.stage.backgroundColor = 0xFFFFFF;\n        this.game.physics.startSystem(Phaser.Physics.ARCADE);\n\n        this.initMap();\n        console.log(this.game)\n\n\n        //this.initPathfinder();\n        //this.initCursor();\n        //this.setupSpriteGroups();\n        //this.addMainPlayer();\n        //this.configPlayerCollisions();\n        //this.initChatModule();\n\n        //this.connectToServer();\n    },\n\n    setupSpriteGroups: function(){\n        this.game.mmo_group_collectables = this.game.add.group();\n        this.game.mmo_group_characters = this.game.add.group();\n    },\n    initMap: function(){\n        //this.map = this.game.add.tilemap('map');\n        //this.map.addTilesetImage('tiles', 'tiles');\n        //this.map.addTilesetImage('collision', 'walkables');\n        this.map = this.game.add.tilemap('tilemap1');\n        //this.map.addTilesetImage('tileset1', 'tileset1');\n        this.map.addTilesetImage('tileset2', 'tileset2');\n        this.map.addTilesetImage('tileset3', 'tileset3');\n        this.map.addTilesetImage('tileset4', 'tileset4');\n        this.map.addTilesetImage('walkable', 'collision');\n        //this.map.addTilesetImage('collision', 'walkables');\n\n        this.walkableLayer = this.map.createLayer('collision');\n\n\n        //this.map.createLayer('ground');\n        //this.map.createLayer('obstacles');\n        this.map.createLayer('layer 2');\n\n        this.map.createLayer('ground');\n        this.initPathfinder();\n        this.initCursor();\n        this.setupSpriteGroups()\n        this.addMainPlayer();\n        this.configPlayerCollisions();\n        this.initChatModule();\n        this.connectToServer();\n\n        this.map.createLayer('layer 1');\n        this.map.createLayer('layer 2');\n\n        this.walkableLayer.resizeWorld();\n    },\n\n    initPathfinder: function(){\n\n        Pathfinder.init(this.game,\n                        this.walkableLayer,\n                        this.map.layers[3].data, // the layer containing the walkable tiles\n                        [2529], // ID of the walkable tile ( the green one )\n                        32\n        );\n    },\n\n    initCursor: function(){\n        this.marker = this.game.add.graphics();\n        this.marker.lineStyle(2, 0x000000, 1);\n        this.marker.drawRect(0, 0, Pathfinder.tileSize, Pathfinder.tileSize);\n\n        this.input.onDown.add(function(event){\n            this.updateCursorPosition();\n            this.mainPlayer.moveTo(this.marker.x, this.marker.y, function(path){\n\n            });\n        }, this);\n\n    },\n\n    updateCursorPosition: function(){\n        this.marker.x = this.walkableLayer.getTileX(this.game.input.activePointer.worldX) * 32;\n        this.marker.y = this.walkableLayer.getTileY(this.game.input.activePointer.worldY) * 32;\n    },\n\n\n    addMainPlayer: function(){\n        this.game.world.setBounds(0, 0, 20, 20);\n\n        var startX = (80 * Pathfinder.tileSize) + (Pathfinder.tileSize / 2);\n        var startY = (88 * Pathfinder.tileSize) + (Pathfinder.tileSize / 2);\n\n        this.mainPlayer = new CharacterObj(this.game, startX, startY, true);\n        //this.game.camera.follow(this.mainPlayer.sprite);\n        //this.game.camera.deadzone = new Phaser.Rectangle(this.mainPlayer.sprite.x, this.mainPlayer.sprite.y, 600, 400);\n        this.game.camera.deadzone = new Phaser.Rectangle(this.game.camera.x+this.mainPlayer.sprite.width*2,\n                                                         this.game.camera.y+this.mainPlayer.sprite.height*2,\n                                                         this.game.width-this.mainPlayer.sprite.width*4,\n                                                         this.game.height-this.mainPlayer.sprite.height*4);\n        console.log(this.game)\n        this.mainPlayer.nickname = this.game.mainPlayerName;\n\n        red_zone  = this.game.add.graphics();\n        cursors = this.game.input.keyboard.createCursorKeys();\n    },\n\n    configPlayerCollisions: function(){\n        var me = this;\n        this.mainPlayer.setOnCollideCollectableMapAction(function(collectable) {\n            collectable.destroy();\n            MapDataClient.tryToCollectForPlayer(collectable, me.mainPlayer);\n        });\n    },\n\n    connectToServer: function(){\n        var me = this;\n        var serverSocket = NetworkManager.connect(this.mainPlayer);\n\n        NetworkManager.onOtherPlayerConnected(function(otherPlayerInfo){\n            ChatManager.systemMessage('info', otherPlayerInfo.nickname + ' is connected');\n            me.addOtherPlayer(otherPlayerInfo);\n        });\n\n        // set what to do when the current player receive movement information about another player\n        NetworkManager.onOtherPlayerMove(function(movementInfo){\n            var otherPlayerToMove = searchById(me.otherPlayers, movementInfo.uid);\n            if(otherPlayerToMove){\n                otherPlayerToMove.moveTo(movementInfo.x, movementInfo.y);\n            }\n        });\n\n        // set what to do when the client receive the players list from the server\n        NetworkManager.onUpdatePlayerList(function(receivedList){\n            me.removeDisconnected(receivedList);\n            me.addConnected(receivedList);\n\n        });\n        this.otherPlayers = [];\n\n        this.synchronizeMapData(serverSocket);\n    },\n\n    addOtherPlayer: function(otherPlayerInfo){\n        var otherPlayer = new CharacterObj(this.game, otherPlayerInfo.x, otherPlayerInfo.y, false);\n        otherPlayer.uid = otherPlayerInfo.uid;\n        otherPlayer.nickname = otherPlayerInfo.nickname;\n        this.otherPlayers.push(otherPlayer);\n    },\n\n    removeDisconnected: function(receivedList){\n        var newOtherPlayers = [];\n        for(var i = 0, max = this.otherPlayers.length; i<max; i++){\n            var otherPlayer = this.otherPlayers[i];\n            // test if the player on this browser is still on the server list\n            var playerInList = searchById(receivedList, otherPlayer.uid);\n\n            if(playerInList){\n                // keep the player\n                newOtherPlayers.push(otherPlayer);\n            } else {\n                // remove from the game\n                otherPlayer.destroy();\n                ChatManager.systemMessage('error', otherPlayer.nickname + ' disconnected');\n            }\n        }\n        this.otherPlayers = newOtherPlayers;\n    },\n\n    addConnected: function(receivedList){\n        // search in the list if an element is not present in the otherPlayers, and not mainPlayer Add it\n\n        for(var i = 0, max = receivedList.length; i<max;i++){\n            var receivedPlayer = receivedList[i];\n            if(receivedPlayer.uid !== this.mainPlayer.uid){\n                var connectedPlayer = searchById(this.otherPlayers, receivedPlayer.uid);\n                if(!connectedPlayer){\n                    this.addOtherPlayer(receivedPlayer);\n                }\n            }\n\n        }\n    },\n\n    initChatModule: function(){\n        ChatManager.init(this.game.parent);\n        var me = this;\n\n        NetworkManager.setOnReceiveChatMessage(function(messageInfo){\n            ChatManager.appendMessage(messageInfo.nickname, messageInfo.text);\n        });\n    },\n\n    synchronizeMapData: function(serverSocket){\n        MapDataClient.synchronize(serverSocket, this);\n    },\n\n    checkMainPlayerCollision: function() {\n        if(this.mainPlayer !== undefined) {\n            this.mainPlayer.checkCollision();\n        }\n    },\n\n    update: function(){\n        this.updateCursorPosition();\n        this.checkMainPlayerCollision();\n        //this.game.camera.setPosition(this.mainPlayer.sprite.x, this.mainPlayer.sprite.y);\n        var zone = this.game.camera.deadzone;\n\n\n        if (this.mainPlayer.sprite.x>zone.x+zone.width){\n            console.log(this.game.camera.deadzone)\n            this.game.camera.deadzone = new Phaser.Rectangle(this.game.camera.deadzone.x+this.game.camera.deadzone.width,\n                                                             this.game.camera.y+this.mainPlayer.sprite.height,\n                                                             this.game.width-this.mainPlayer.sprite.width*4,\n                                                             this.game.height - this.mainPlayer.sprite.height*4);\n            this.game.camera.setPosition(this.game.camera.deadzone.x-this.mainPlayer.sprite.width, this.camera.y);\n\n        }\n        if (this.mainPlayer.sprite.y>zone.y+zone.height){\n            console.log(this.game.camera.deadzone)\n            this.game.camera.deadzone = new Phaser.Rectangle(this.game.camera.x+this.mainPlayer.sprite.width,\n                                                             this.game.camera.deadzone.y+this.game.camera.deadzone.height,\n                                                             this.game.width-this.mainPlayer.sprite.width*4,\n                                                             this.game.height - this.mainPlayer.sprite.height*4);\n            this.game.camera.setPosition(this.camera.x, this.game.camera.deadzone.y-this.mainPlayer.sprite.height);\n\n        }\n        /////\n        if (this.mainPlayer.sprite.x<this.game.camera.deadzone.x){\n            // console.log(this.game.camera.deadzone)\n            console.log('here')\n            this.game.camera.deadzone = new Phaser.Rectangle(this.game.camera.deadzone.x-this.game.camera.deadzone.width*4,\n                                                             this.game.camera.y+this.mainPlayer.sprite.height,\n                                                             this.game.width-this.mainPlayer.sprite.width*4,\n                                                             this.game.height - this.mainPlayer.sprite.height*4);\n            this.game.camera.setPosition(this.game.camera.deadzone.x-this.mainPlayer.sprite.width, this.camera.y);\n        }\n        if (this.mainPlayer.sprite.y<this.game.camera.deadzone.y){\n            // console.log(this.game.camera.deadzone)\n            this.game.camera.deadzone = new Phaser.Rectangle(this.game.camera.x+this.mainPlayer.sprite.width,\n                                                             this.game.camera.deadzone.y-this.game.camera.deadzone.height*4,\n                                                             this.game.width-this.mainPlayer.sprite.width*4,\n                                                             this.game.height - this.mainPlayer.sprite.height*4);\n            this.game.camera.setPosition(this.camera.x, this.game.camera.deadzone.y-this.mainPlayer.sprite.height);\n        }\n\n        red_zone.lineStyle(2, 0x000000, 1);\n        red_zone.drawRect(zone.x, zone.y, zone.width, zone.height);\n\n\n          if (cursors.left.isDown)\n          {\n              this.mainPlayer.sprite.x -= 4;\n          }\n          else if (cursors.right.isDown)\n          {\n              this.mainPlayer.sprite.x += 4;\n          }\n\n          if (cursors.up.isDown)\n          {\n              this.mainPlayer.sprite.y -= 4;\n          }\n          else if (cursors.down.isDown)\n          {\n              this.mainPlayer.sprite.y += 4;\n          }\n           this.game.world.wrap(this.mainPlayer.sprite, 0, true);\n    }\n};\n\nfunction searchById(array, id){\n    for(var i = 0, max = array.length; i < max; i++){\n        var uid = array[i].getInfo ? array[i].getInfo().uid : array[i].uid;\n        if(array[i] != null && uid === id){\n            return array[i];\n        }\n    }\n    return undefined;\n}\n\nfunction removeElementById(array, id){\n    return array.filter(function( obj ) {\n        return obj.uid !== id;\n    });\n}\n\nmodule.exports = Play;\n","'use strict';\n\nvar NetworkManager = require('client/network/NetworkManager');\n\nvar chatInput, messagesBox;\nvar mainPlayerName;\n\nfunction init(containerId){\n    initGuiElements(containerId);\n    appendSystemMessage('info', 'Welcome ' + mainPlayerName + ' to test mmo');\n}\n\n/*\n Create the html structure that correspond to this :\n\n <div id=\"game-chat-box\">\n     <div class=\"game-chat-messages\">\n        Messages goes here\n     </div>\n     <form>\n        <input type=\"text\" class=\"game-chat-input\">\n     </form>\n </div>\n */\nfunction initGuiElements(containerId){\n    var container = document.getElementById(containerId);\n\n    var chatBox = document.createElement('div');\n    chatBox.id = 'game-chat-box';\n\n    messagesBox = document.createElement('div');\n    messagesBox.className = 'game-chat-messages';\n\n    var chatForm = document.createElement('form');\n\n    chatForm.onsubmit= onSendMessage;\n\n    chatInput = document.createElement('input');\n    chatInput.type = 'text';\n    chatInput.className = 'game-chat-input';\n\n    chatForm.appendChild(chatInput);\n\n    chatBox.appendChild(messagesBox);\n    chatBox.appendChild(chatForm);\n\n    container.appendChild(chatBox);\n}\n\nfunction onSendMessage(){\n    var textMessage = escapeHtml(chatInput.value);\n\n    NetworkManager.sendChatMessage(textMessage);\n\n    appendMessage(mainPlayerName, textMessage);\n\n    chatInput.value = '';\n\n    return false;\n}\n\nfunction appendSystemMessage(type, message){\n    appendMessage('*', message, type);\n}\n\nfunction appendMessage(author, message, messageType){\n    var cssTypeSuffix = '';\n    if(messageType !== undefined){\n        cssTypeSuffix = 'game-message-type-' + messageType;\n    }\n\n    var htmlMessage = '<span class=\"game-message ' + cssTypeSuffix + '\"><span class=\"game-message-author\"> [' + author + ']</span> : ' + message + '</span>';\n    messagesBox.innerHTML += htmlMessage + '<br />';\n\n    messagesBox.scrollTop = messagesBox.scrollHeight;\n}\n\nfunction setMainPlayerName(nickName){\n    if(!nickName || nickName.length === 0){\n        return false;\n    }\n    mainPlayerName = escapeHtml(nickName);\n    return mainPlayerName;\n}\n\nfunction escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n\nmodule.exports = {\n    init: init,\n    appendMessage: appendMessage,\n    systemMessage: appendSystemMessage,\n    setMainPlayerName: setMainPlayerName\n};\n","'use strict';\n\nvar containerElement, verticalOffset = 0, horizontalOffset = 0;\n\nfunction getY(y){\n    return y - verticalOffset;\n}\n\nfunction getX(x){\n    return x - horizontalOffset;\n}\n\n\nmodule.exports = {\n    init: function(game){\n        containerElement = document.getElementById(game.parent);\n        verticalOffset = game.height;\n    },\n\n    mediumPanel: function (x, y, cssClass){\n        if(!cssClass){\n            cssClass = '';\n        }\n        var panel = document.createElement('div');\n        panel.className = 'gui-panel gui-panel-medium ' + cssClass;\n        panel.style.left = getX(x) + 'px';\n        panel.style.top = getY(y) + 'px';\n\n        containerElement.appendChild(panel);\n\n        return panel;\n    },\n\n    form: function(onSaveCallback){\n        var form = document.createElement('form');\n        form.onsubmit= function(){\n            onSaveCallback();\n\n            return false;\n        };\n\n        return form;\n    },\n\n    inputBlock: function(){\n        var blockInput = document.createElement('div');\n        blockInput.className='game-input-block';\n        return blockInput;\n    },\n\n    inputWithLabel: function(parent, label, x, y){\n        var nameLabel = document.createElement('div');\n        nameLabel.className='game-gui-label';\n        nameLabel.innerText = label;\n\n\n        var nameInput = document.createElement('input');\n        nameInput.type = 'text';\n        nameInput.className = 'game-gui-input';\n\n        parent.appendChild(nameLabel);\n        parent.appendChild(nameInput);\n\n        return nameInput;\n    },\n\n    createButton: function(label, cssClass){\n        var button = document.createElement('button');\n        button.className = cssClass;\n\n        button.innerText = label;\n        return button;\n    },\n\n    createElement: function(elementName, className){\n        var element = document.createElement(elementName);\n        element.className = className;\n        return element;\n    },\n\n    addToContainer: function(element){\n        containerElement.appendChild(element);\n    },\n    getX: getX,\n    getY: getY\n\n};","'use strict';\n\n\nvar pathfinder;\n\nmodule.exports = {\n  init: function(game, walkableLayer, walkableLayerData, walkableTiles, tileSize){\n\n      this.walkableLayer = walkableLayer;\n      this.tileSize = tileSize;\n      pathfinder = game.plugins.add(Phaser.Plugin.PathFinderPlugin);\n      pathfinder.setGrid(walkableLayerData, walkableTiles);\n      \n  },\n    calculatePath: function(fromX, fromY, toX, toY, onPathReadyCallback){\n        var fromTiles = [this.getTileX(fromX), this.getTileY(fromY)];\n        var toTiles = [this.getTileX(toX), this.getTileY(toY)];\n        pathfinder.preparePathCalculation (fromTiles, toTiles,onPathReadyCallback );\n\n        pathfinder.calculatePath();\n    },\n\n    getTileX: function(value){\n        return this.walkableLayer.getTileX(value);\n    },\n    getTileY: function(value){\n        return this.walkableLayer.getTileY(value);\n    }\n};","'use strict';\n\nvar DomHelper = require('client/utils/DomHelper');\nvar scoreList;\n\n\nfunction init(){\n    var scoreContainer = DomHelper.createElement('div', 'game-scoreboard');\n    //scoreContainer.style.left = DomHelper.getX(800) + 'px';\n    //scoreContainer.style.top = DomHelper.getY(0) + 'px';\n\n    var title = document.createElement('h3');\n    title.innerHTML = 'Scores';\n\n    scoreList = DomHelper.createElement('ul', 'game-scorelist');\n\n    scoreContainer.appendChild(title);\n    scoreContainer.appendChild(scoreList);\n\n    DomHelper.addToContainer(scoreContainer);\n}\n\nfunction setScores(scores){\n    // empty the list\n    while (scoreList.firstChild) {\n        scoreList.removeChild(scoreList.firstChild);\n    }\n\n    scores.sort(orderByScore)\n          .forEach(addScoreElement);\n\n    function orderByScore(a, b) {\n        return parseFloat(b.score) - parseFloat(a.score);\n    }\n    function addScoreElement(scoreInfo){\n        var listElement = document.createElement('li');\n        listElement.innerHTML = '<strong>' + scoreInfo.nickname + '</strong>' + ' : ' + scoreInfo.score;\n\n        scoreList.appendChild(listElement);\n    }\n}\n\nmodule.exports = {\n    init: init,\n    setScores: setScores\n};\n","'use strict';\r\n\r\n\r\nvar ZoneCamera_1;\r\n\r\nmodule.exports = {\r\n  init: function(game,mainPlayer,border_scale){\r\n\r\n      this.game = game;\r\n      this.mainPlayer = hero;\r\n      this.game.camera.deadzone = new Phaser.Rectangle(this.game.camera.x+this.mainPlayer.sprite.width*border_scale, \r\n                                                         this.game.camera.y+this.mainPlayer.sprite.height*border_scale, \r\n                                                         this.game.width-this.mainPlayer.sprite.width*border_scale*2, \r\n                                                         this.game.height-this.mainPlayer.sprite.height*border_scale*2);\r\n      this.game.camera.setPosition(this.game.camera.deadzone.x-this.mainPlayer.sprite.width, this.camera.y-this.mainPlayer.sprite.height);\r\n      \r\n  },\r\n    updateCamera: function(){\r\n         var zone = this.game.camera.deadzone;\r\n        \r\n\r\n        if (this.mainPlayer.sprite.x>zone.x+zone.width){\r\n            console.log(this.game.camera.deadzone)\r\n            this.game.camera.deadzone = new Phaser.Rectangle(this.game.camera.deadzone.x+this.game.camera.deadzone.width, \r\n                                                             this.game.camera.y+this.mainPlayer.sprite.height, \r\n                                                             this.game.width-this.mainPlayer.sprite.width*border_scale*2, \r\n                                                             this.game.height - this.mainPlayer.sprite.height*border_scale*2);\r\n            this.game.camera.setPosition(this.game.camera.deadzone.x-this.mainPlayer.sprite.width, this.camera.y);\r\n            \r\n        }\r\n        if (this.mainPlayer.sprite.y>zone.y+zone.height){\r\n            console.log(this.game.camera.deadzone)\r\n            this.game.camera.deadzone = new Phaser.Rectangle(this.game.camera.x+this.mainPlayer.sprite.width, \r\n                                                             this.game.camera.deadzone.y+this.game.camera.deadzone.height,  \r\n                                                             this.game.width-this.mainPlayer.sprite.width*border_scale*2, \r\n                                                             this.game.height - this.mainPlayer.sprite.height*border_scale*2);\r\n            this.game.camera.setPosition(this.camera.x, this.game.camera.deadzone.y-this.mainPlayer.sprite.height);\r\n            \r\n        }\r\n        /////\r\n        if (this.mainPlayer.sprite.x<this.game.camera.deadzone.x){\r\n            // console.log(this.game.camera.deadzone)\r\n            console.log('here')\r\n            this.game.camera.deadzone = new Phaser.Rectangle(this.game.camera.deadzone.x-this.game.camera.deadzone.width*border_scale*2, \r\n                                                             this.game.camera.y+this.mainPlayer.sprite.height, \r\n                                                             this.game.width-this.mainPlayer.sprite.width*border_scale*2, \r\n                                                             this.game.height - this.mainPlayer.sprite.height*border_scale*2);\r\n            this.game.camera.setPosition(this.game.camera.deadzone.x-this.mainPlayer.sprite.width, this.camera.y);\r\n        }\r\n        if (this.mainPlayer.sprite.y<this.game.camera.deadzone.y){\r\n            // console.log(this.game.camera.deadzone)\r\n            this.game.camera.deadzone = new Phaser.Rectangle(this.game.camera.x+this.mainPlayer.sprite.width, \r\n                                                             this.game.camera.deadzone.y-this.game.camera.deadzone.height*border_scale*2,  \r\n                                                             this.game.width-this.mainPlayer.sprite.width*border_scale*2, \r\n                                                             this.game.height - this.mainPlayer.sprite.height*border_scale*2);\r\n            this.game.camera.setPosition(this.camera.x, this.game.camera.deadzone.y-this.mainPlayer.sprite.height);\r\n        }\r\n\r\n        red_zone.lineStyle(2, 0x000000, 1);\r\n        red_zone.drawRect(zone.x, zone.y, zone.width, zone.height);\r\n    },\r\n\r\n};"]}